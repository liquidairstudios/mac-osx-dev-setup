#!/bin/bash

export IFS=$'\n'

fetch_branch_heads() {
  local branches=$(git branch -a | grep -v "master" | grep -v "develop" | sed 's/^ *//')
  local date=${1}

  for branch in $branches; do
   local revision=$(git log -1 --abbrev-commit --date=relative --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %Cgreen(%cr)%Creset last commit by %C(bold blue)<%an>%Creset' --until $date $branch)
   printf "%s\n" $revision
  done
}

current_branch_name() {
  git rev-parse --abbrev-ref HEAD
}

clean_branches() {
  local date=${1}
  local branch_heads=$(fetch_branch_heads $date)

  for heads in $branch_heads; do
    echo $heads
  done
}

# default program usage
print_usage_and_exit() {
  printf "Usage:\n"
  printf "  git-clean-branches --until [date]\n"
  printf "\n"
  printf "  Deletes all branches except master and develop\n"
  printf "  The current branch must be either 'master' or 'develop'\n"
  printf "\n"
  printf "Options:\n"
  printf "    -u, --until                 Delete branches older thant specified date\n"
  printf "    -h, --help                  Display this [h]elp\n"
  printf "    -V, --version               Display the program [v]ersion\n"
  exit 1
}

print_error_and_exit() {
  echo "${1}" >&2
  printf "'git-clean-branches --help' for usage.\n"
  exit 1
}

parse_options() {
  local version='0.1'

  if [[ -z "${1+x}" ]]; then
    print_usage_and_exit
  fi

  if [[ "${1}" == '--' ]]; then
    print_usage_and_exit
  fi

  while :; do
    case ${1} in
      -u|--until)
        if [[ -z "${2}" ]]; then
          print_error_and_exit "ERROR: A date must be passed to the '${1}' parameter."
        elif [[ "$(current_branch_name)" != "master" && "$(current_branch_name)" != "develop" ]]; then
          print_error_and_exit "ERROR: A current branch is '$(current_branch_name)'. It must be 'master' or 'develop'."
        else
          clean_branches ${2}
        fi
        ;;
      -h|--help)
        print_usage_and_exit
        ;;
      -V|--version)
        printf "Version %s\n" ${version}
        exit 0
        ;;
      --) # ignore all following options
        shift
        break
        ;;
      *)
        print_error_and_exit "ERROR: Unrecognized parameter '${1}'."
    esac

    shift
  done
}

main() {
  parse_options "${@}"
}

set +o nounset
main "${@}"
set -o nounset
